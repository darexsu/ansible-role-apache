---
- name: merge dictionaries
  block:
    - include_vars:
        file: ../../darexsu.apache/defaults/main.yml
        name: apache_default_vars

    - name: merge default and new dictionaries
      set_fact:
        "{{ item.key }}": "{{ apache_default_vars[item.key] | combine(merge[item.key], recursive=True)}}"
      when: apache_default_vars[item.key] is defined
      with_dict: "{{ merge }}"

    - name: combine defaults vars with merge dictionary
      set_fact:
        merge: "{{ apache_default_vars | combine(merge, recursive=True)}}"
  when: merge is defined

- name: apache role is disabled
  meta: end_play
  when: not apache.enabled

- name: "-> 01_Apache_install.yml"
  include_tasks: ./tasks/01_Apache_install.yml
  when: apache_install.enabled

- name: service facts
  ansible.builtin.service_facts:

- name: "-> 02_Apache_conf.yml"
  include_tasks: "./tasks/02_Apache_conf.yml"
  when: apache_conf.enabled and ansible_facts.services is search(apache_const[ansible_os_family]['service_name'])

- name: "-> 03_Apache_modules_{{ ansible_os_family }}.yml"
  include_tasks: "./tasks/03_Apache_modules_{{ ansible_os_family }}.yml"
  when: apache_modules.enabled and ansible_facts.services is search(apache_const[ansible_os_family]['service_name'])

- name: "-> 04_Apache_virtualhost_{{ ansible_os_family }}.yml"
  include_tasks: ./tasks/04_Apache_virtualhost_{{ ansible_os_family }}.yml
  when: apache_virtualhost[item.key]['enabled'] and ansible_facts.services is search(apache_const[ansible_os_family]['service_name'])
  with_dict: "{{ apache_virtualhost }}"

- name: ensure apache is "{{ apache.service.state }}"
  ansible.builtin.service:
    name: "{{ apache_const[ansible_os_family]['service_name'] }}"
    state: "{{ apache.service.state }}"
    enabled: "{{ apache.service.enabled }}"
  when: ansible_facts.services is search(apache_const[ansible_os_family]['service_name'])